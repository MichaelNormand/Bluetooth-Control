{"version":3,"sources":["device.js","App.js","serviceWorker.js","index.js"],"names":["Device","handleStateChangeClick","event","undefined","props","socket","emit","JSON","stringify","key","id","status","state","console","log","handleDestroyClick","this","setState","on","data","deviceChanged","parse","className","name","onClick","React","Component","App","fetchDevices","apiUrl","fetch","then","response","json","devices","webSocket","catch","error","device","push","map","deviceRemoved","filter","endpoint","length","WebSockets","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41ef35e8.chunk.js","sourcesContent":["import React from 'react'\nimport './device.css'\n\nexport default class Device extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            status: undefined\n        }\n    }\n    componentDidMount() {\n        if (this.state.status === undefined) {\n            this.setState({ status: this.props.status })\n        }\n        if (this.props.socket !== undefined) {\n            this.props.socket.on('device-status-changed', data => {\n                let deviceChanged = JSON.parse(data)\n                if (deviceChanged.key === this.props.id) {\n                    this.setState({ status: deviceChanged.status })\n                }\n            })\n        }\n    }\n    handleStateChangeClick = event => {\n        if (this.props.socket === undefined) {\n            console.log('There is no socket available')\n            return\n        }\n        this.props.socket.emit(\n            'device-status-change-request',\n            JSON.stringify({ key: this.props.id, status: !this.state.status })\n        )\n    }\n    handleDestroyClick = event => {\n        if (this.props.socket === undefined) {\n            console.log('There is no socket available')\n            return\n        }\n        this.props.socket.emit(\n            'device-remove',\n            JSON.stringify({ key: this.props.id })\n        )\n    }\n    render() {\n        return (\n            <div className=\"device\">\n                <h1>{this.props.name}</h1>\n                <h3\n                    className={\n                        this.state.status !== undefined && this.state.status\n                            ? 'active'\n                            : 'inactive'\n                    }\n                >\n                    {this.state.status ? 'Actif' : 'Inactif'}\n                </h3>\n                <button\n                    onClick={this.handleStateChangeClick}\n                    className={\n                        this.state.status !== undefined && this.state.status\n                            ? 'inactive'\n                            : 'active'\n                    }\n                >\n                    {this.state.status !== undefined && this.state.status\n                        ? 'Ã‰teindre'\n                        : 'Allumer'}\n                </button>\n                <button onClick={this.handleDestroyClick} className=\"inactive\">\n                    Supprimer\n                </button>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport Device from './device'\nimport WebSockets from 'socket.io-client'\nimport './App.css'\n\nexport default class App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            devices: [],\n            webSocket: undefined,\n            endpoint: 'http://localhost:4000/'\n        }\n    }\n    fetchDevices = (socket, apiUrl) => {\n        fetch(apiUrl + 'list-devices')\n            .then(response => {\n                response\n                    .json()\n                    .then(devices => {\n                        this.setState({ devices: devices, webSocket: socket })\n                    })\n                    .catch(error => {\n                        console.log(error)\n                        this.setState({ webSocket: socket })\n                    })\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ webSocket: socket })\n            })\n        if (socket !== undefined) {\n            socket.on('devices-list', data => {\n                let devices = JSON.parse(data)\n                this.setState({ devices: devices })\n            })\n            socket.on('device-online', data => {\n                let device = JSON.parse(data)\n                this.state.devices.push(device)\n                this.setState({\n                    devices: this.state.devices.map(device => device)\n                })\n            })\n            socket.on('device-offline', data => {\n                let deviceRemoved = JSON.parse(data)\n                this.setState({\n                    devices: this.state.devices.filter(device => {\n                        return device.key !== deviceRemoved.key\n                    })\n                })\n            })\n        }\n    }\n    render() {\n        if (this.state.devices.length <= 0) {\n            return (\n                <div className=\"container\">\n                    <div className=\"loading\">\n                        <h1>En attente de dispositifs</h1>\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"container\">\n                {this.state.devices.map(device => {\n                    return (\n                        <Device\n                            key={device.key}\n                            id={device.key}\n                            name={device.name}\n                            status={device.status}\n                            socket={this.state.webSocket}\n                        />\n                    )\n                })}\n            </div>\n        )\n    }\n    componentDidMount() {\n        if (this.state.webSocket === undefined) {\n            let apiUrl = this.state.endpoint\n            let socket = WebSockets(apiUrl)\n            this.fetchDevices(socket, apiUrl)\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}